#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>

// List of C keywords
const char *keywords[] = {
    "auto", "break", "case", "char", "const", "continue", "default", "do", "double",
    "else", "enum", "extern", "float", "for", "goto", "if", "inline", "int", "long",
    "register", "restrict", "return", "short", "signed", "sizeof", "static", "struct",
    "switch", "typedef", "union", "unsigned", "void", "volatile", "while", "_Alignas",
    "_Alignof", "_Atomic", "_Bool", "_Complex", "_Generic", "_Imaginary", "_Noreturn",
    "_Static_assert", "_Thread_local"
};

// Function to check if a word is a C keyword
bool isKeyword(const char *word) {
    int n = sizeof(keywords) / sizeof(keywords[0]);
    for (int i = 0; i < n; i++) {
        if (strcmp(word, keywords[i]) == 0)
            return true;
    }
    return false;
}

// Function to check if a string is a valid identifier
bool isValidIdentifier(const char *str) {
    // Check if the string is empty
    if (str[0] == '\0')
        return false;

    // First character must be a letter or underscore
    if (!(isalpha(str[0]) || str[0] == '_'))
        return false;

    // Check the remaining characters
    for (int i = 1; str[i] != '\0'; i++) {
        if (!(isalnum(str[i]) || str[i] == '_'))
            return false; // Invalid character found
    }

    // Check if it's a keyword
    if (isKeyword(str))
        return false;

    return true;
}

int main() {
    char identifier[50];

    // User input
    printf("Enter an identifier: ");
    scanf("%s", identifier);

    // Validate identifier
    if (isValidIdentifier(identifier))
        printf("\"%s\" is a valid C identifier.\n", identifier);
    else
        printf("\"%s\" is NOT a valid C identifier.\n", identifier);

    return 0;
}
